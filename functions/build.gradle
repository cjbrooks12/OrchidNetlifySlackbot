plugins {
    id "kotlin2js" version "1.3.11"
    id "com.moowork.node" version "1.2.0"
}
compileKotlin2Js {
    kotlinOptions.moduleKind = "commonjs"
}

// Compile Kotlin to Javascript
//----------------------------------------------------------------------------------------------------------------------

repositories {
    mavenCentral()
}
dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.1.0"
}

task assembleWeb(type: Sync) {
    configurations.compile.each { File file ->
        from(zipTree(file.absolutePath), {
            includeEmptyDirs = false
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                        !path.startsWith("META-INF/"))
            }
        })
    }
    from compileKotlin2Js.destinationDir
    into "${project.buildDir}/classes/kotlin/vendor"

    dependsOn classes
}
assemble.dependsOn assembleWeb

// Connect Gradle to Node
//----------------------------------------------------------------------------------------------------------------------

node {
    version '10.8.0'
    npmVersion '6.2.0'
    yarnVersion '1.9.4'
    download = true
}

task serveFunctions(type: YarnTask) {
    dependsOn assemble
    environment = getEnv()
    args = ['netlify-lambda', 'serve', "src/main/js", '-c', 'extraConfig.js']
}

task buildFunctions(type: YarnTask) {
    dependsOn assemble
    args = ['netlify-lambda', 'build', "src/main/js", '-c', 'extraConfig.js']
}
tasks.build.dependsOn buildFunctions

// Helper functions
//----------------------------------------------------------------------------------------------------------------------

Map<String, String> getEnv() {
    def f = file("${project.projectDir}/.env")
    def vars = [:]

    if(f.exists()) {
        f.readLines().each() {
            if (!it.isEmpty() && !it.startsWith("#")) {
                def pos = it.indexOf("=")
                def key = it.substring(0, pos).trim()
                def value = it.substring(pos + 1).trim()
                vars[key] = value
            }
        }
    }

    return vars
}